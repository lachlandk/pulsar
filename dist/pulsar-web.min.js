window.Pulsar=function(){const t=function(){const t={setupProperties(i,r,s){for(const o in e[r])if(e[r].hasOwnProperty(o)){const n=e[r][o],a=Object.keys(s).includes(o),h=[i,o,n.type];n.multi?h.push(...a?Array.isArray(s[o])?s[o]:[s[o]]:n.value):h.push(a?s[o]:n.value),Object.keys(e[r][o]).includes("extra")&&h.push(n.extra),t[n.setter](...h)}},setAxesProperty(t,e,i,...r){if(1===r.length&&typeof r[0]===i)t[e]={x:r[0],y:r[0]};else{if(2!==r.length||typeof r[0]!==i||typeof r[1]!==i)throw`Error setting axes property ${e}: Unexpected value ${JSON.stringify(r)}.`;t[e]={x:r[0],y:r[1]}}t._updateBackground()},setSingleProperty(t,e,i,r){if(typeof r!==i)throw`Error setting single property ${e}: Unexpected type "${"string"==typeof r?r:JSON.stringify(r)}".`;t[e]=r},setArrayProperty(t,e,i,r,s){if(!Array.isArray(r))throw`Error setting array property ${e}: "${"string"==typeof r?r:JSON.stringify(r)}" is not an array.`;if(r.length!==s)throw`Error setting array property ${e}: "${JSON.stringify(r)}" is not of length ${s}`;for(const t of r)if(typeof t!==i)throw`Error setting array property ${e}: "Unexpected type "${"string"==typeof t?t:JSON.stringify(t)}" in array.`;t[e]=r},setChoiceProperty(t,e,i,r,s){if(typeof r!==i)throw`Error setting choice property ${e}: Unexpected type "${"string"==typeof r?r:JSON.stringify(r)}".`;{let i=!1;for(const o of s)r===o&&(t[e]=r,i=!0);if(!i)throw`Error setting choice property ${e}: Invalid choice "${"string"==typeof r?r:JSON.stringify(r)}".`}},setLegendProperty(i,r,s,o){const n=e.ResponsivePlot2DTrace[s];if(void 0===i.legend[r])throw`Error setting legend property ${s}: Invalid trace ID "${"string"==typeof r?r:JSON.stringify(r)}"`;{const e=[i.legend[r],s,n.type,o];Object.keys(n).includes("extra")&&e.push(n.extra),t[n.setter](...e),i._updatePlottingData()}}},e={ResponsiveCanvas:{origin:{value:[0,0],type:"number",setter:"setAxesProperty",multi:!0}},ResponsivePlot2D:{majorTicks:{value:[!0,!0],type:"boolean",setter:"setAxesProperty",multi:!0},minorTicks:{value:[!1,!1],type:"boolean",setter:"setAxesProperty",multi:!0},majorTickSize:{value:[5,5],type:"number",setter:"setAxesProperty",multi:!0},minorTickSize:{value:[1,1],type:"number",setter:"setAxesProperty",multi:!0},majorGridlines:{value:[!0,!0],type:"boolean",setter:"setAxesProperty",multi:!0},minorGridlines:{value:[!1,!1],type:"boolean",setter:"setAxesProperty",multi:!0},majorGridSize:{value:[5,5],type:"number",setter:"setAxesProperty",multi:!0},minorGridSize:{value:[1,1],type:"number",setter:"setAxesProperty",multi:!0},gridScale:{value:[50,50],type:"number",setter:"setAxesProperty",multi:!0}},ResponsivePlot2DTrace:{traceColour:{value:"blue",type:"string",setter:"setSingleProperty"},traceStyle:{value:"solid",type:"string",setter:"setChoiceProperty",extra:["solid","dotted","dashed","dashdot","none"]},traceWidth:{value:3,type:"number",setter:"setSingleProperty"},markerColour:{value:"blue",type:"string",setter:"setSingleProperty"},markerStyle:{value:"none",type:"string",setter:"setChoiceProperty",extra:["circle","plus","cross","arrow","none"]},markerSize:{value:1,type:"number",setter:"setSingleProperty"},parameterRange:{value:[0,1],type:"number",setter:"setArrayProperty",extra:2}}},i={};class r{constructor(e,r={}){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw`Error in ResponsiveCanvas constructor: Element with ID ${JSON.stringify(e)} could not be found.`;this.container=t,this.id=e,this.container=document.getElementById(e)}else{if(!(e instanceof Element))throw"Error in ResponsiveCanvas constructor: Container parameter could not be recognised as an Element or an ID string.";if(this.container=e,!e.id)throw"Error in ResponsiveCanvas constructor: Container element must have a valid ID.";this.id=e.id}i[this.id]=this,this.container.style.position="relative",this.backgroundCanvas=document.createElement("canvas"),this.foregroundCanvas=document.createElement("canvas"),this.background=this.backgroundCanvas.getContext("2d"),this.foreground=this.foregroundCanvas.getContext("2d"),this.width=this.container.clientWidth,this.height=this.container.clientHeight,"center"!==r.origin&&"centre"!==r.origin||(r.origin=[Math.round(this.width/2),Math.round(this.height/2)]),t.setupProperties(this,"ResponsiveCanvas",r),this.observer=new ResizeObserver((t=>{for(const e of t)this.width=e.target.clientWidth,this.height=e.target.clientHeight,this._updateCanvasDimensions()})),this.observer.observe(this.container),this.backgroundCanvas.style.position="absolute",this.backgroundCanvas.style.left="0",this.backgroundCanvas.style.top="0",this.foregroundCanvas.style.position="absolute",this.foregroundCanvas.style.left="0",this.foregroundCanvas.style.top="0",this.container.appendChild(this.backgroundCanvas),this.container.appendChild(this.foregroundCanvas),this.setID(this.id),this.currentTimeValue=0,this.startTimeStamp=0,this.offsetTimeStamp=0,this.timeEvolutionActive=!1}_updateCanvasDimensions(){this.backgroundCanvas.width=this.width,this.backgroundCanvas.height=this.height,this.background.translate(this.origin.x,this.origin.y),this._updateBackground(),this.foregroundCanvas.width=this.width,this.foregroundCanvas.height=this.height,this.foreground.translate(this.origin.x,this.origin.y),this._updateForeground()}_updateBackground(){this.background.clearRect(-this.origin.x,-this.origin.y,this.width,this.height),this.backgroundFunction&&this.backgroundFunction(this.background)}_updateForeground(){this.foreground.clearRect(-this.origin.x,-this.origin.y,this.width,this.height),this.foregroundFunction&&this.foregroundFunction(this.foreground)}setBackground(t){this.backgroundFunction=t,this._updateBackground()}setForeground(t){this.foregroundFunction=t,this._updateForeground()}startTime(){this.timeEvolutionActive=!0,this.startTimeStamp=performance.now(),window.requestAnimationFrame((t=>this._updateTime(t)))}pauseTime(){this.timeEvolutionActive=!1,this.offsetTimeStamp=performance.now()-this.startTimeStamp}stopTime(){this.timeEvolutionActive=!1,this.currentTimeValue=0,this.offsetTimeStamp=0,this._updateForeground()}_updateTime(t){this.timeEvolutionActive&&(this.currentTimeValue=(this.offsetTimeStamp+t-this.startTimeStamp)/1e3,this._updateForeground(),window.requestAnimationFrame((t=>this._updateTime(t))))}setOrigin(...e){1!==e.length||"centre"!==e[0]&&"center"!==e[0]?t.setAxesProperty(this,"origin","number",...e):t.setAxesProperty(this,"origin","number",Math.round(this.width/2),Math.round(this.height/2)),this._updateCanvasDimensions()}setID(e){const r=this.id;t.setSingleProperty(this,"id","string",e),delete i[r],i[this.id]=this,this.backgroundCanvas.parentElement.id=this.id,this.backgroundCanvas.id=`${this.id}-background-canvas`,this.foregroundCanvas.id=`${this.id}-foreground-canvas`}setBackgroundCSS(t){if("string"!=typeof t)throw`Error setting background CSS for canvas: Unexpected argument ${JSON.stringify(id)}`;this.backgroundCanvas.style.background=t}}return{activeCanvases:i,ResponsiveCanvas:r,ResponsivePlot2D:class extends r{constructor(e,i={}){super(e,i),t.setupProperties(this,"ResponsivePlot2D",i),this._updateLimits(),this.setBackground((t=>{const e=(e,i,r,s,o,n)=>{const a=s%2==0?0:.5,h=this[""+(e+("Ticks"===r?"TickSize":"GridSize"))][i];if(t.lineWidth=s,this[`${e+r}`][i]){t.beginPath();let e=-Math.floor(this.origin[i]/(h*this.gridScale[i]))*h*this.gridScale[i];if("x"===i)for(;e<this.width-this.origin.x;)t.moveTo(e+a,o),t.lineTo(e+a,n),e+=this.gridScale.x*h;else if("y"===i)for(;e<this.height-this.origin.y;)t.moveTo(o,e+a),t.lineTo(n,e+a),e+=this.gridScale.y*h;t.stroke()}};t.lineCap="square",t.strokeStyle="rgb(0, 0, 0)",e("minor","x","Gridlines",1,-this.origin.y,this.height-this.origin.y),e("minor","y","Gridlines",1,-this.origin.x,this.width-this.origin.x),e("major","x","Gridlines",2,-this.origin.y,this.height-this.origin.y),e("major","y","Gridlines",2,-this.origin.x,this.width-this.origin.x),e("minor","x","Ticks",1,-3,3),e("minor","y","Ticks",1,-3,3),e("major","x","Ticks",2,-6,6),e("major","y","Ticks",2,-6,6),t.beginPath(),t.lineWidth=3,t.moveTo(.5,-this.origin.y),t.lineTo(.5,this.height-this.origin.y),t.moveTo(-this.origin.x,.5),t.lineTo(this.width-this.origin.x,.5),t.stroke()})),this.legend={}}_updateLimits(){this.xLims=[-this.origin.x/this.gridScale.x,(this.width-this.origin.x)/this.gridScale.x],this.yLims=[-this.origin.y/this.gridScale.y,(this.height-this.origin.y)/this.gridScale.y]}_updatePlottingData(){this.setForeground((t=>{for(const e in this.legend)if(this.legend.hasOwnProperty(e)){const i=this.legend[e];if("none"!==i.traceStyle){switch(t.strokeStyle=i.traceColour,t.lineWidth=i.traceWidth,t.lineJoin="round",i.traceStyle){case"solid":t.setLineDash([]);break;case"dotted":t.setLineDash([3,3]);break;case"dashed":t.setLineDash([10,10]);break;case"dashdot":t.setLineDash([15,3,3,3])}const e=i.data(this.currentTimeValue,this.xLims,this.yLims,.01,i.parameterRange);t.beginPath();for(const i of e)Number.isSafeInteger(Math.round(i[1]))||(i[1]=i[1]>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER),t.lineTo(i[0]*this.gridScale.x,-i[1]*this.gridScale.y);t.stroke()}if("none"!==i.markerStyle){const e=i.markerSize;t.strokeStyle=i.markerColour,t.fillStyle=i.markerColour,t.lineWidth=2*e;const r=(()=>{switch(i.markerStyle){case"circle":return(t,i,r)=>{t.arc(i,r,5*e,0,2*Math.PI),t.fill()};case"plus":return(t,i,r)=>{t.moveTo(i,r+5*e),t.lineTo(i,r-5*e),t.moveTo(i+5*e,r),t.lineTo(i-5*e,r),t.stroke()};case"cross":return(t,i,r)=>{t.moveTo(i+5*e,r+5*e),t.lineTo(i-5*e,r-5*e),t.moveTo(i-5*e,r+5*e),t.lineTo(i+5*e,r-5*e),t.stroke()};case"arrow":return(t,i,r,s)=>{isNaN(s)||(t.translate(i,r),t.rotate(-s-Math.PI/2),t.moveTo(0,-7*e),t.lineTo(-5*e,7*e),t.lineTo(5*e,7*e),t.lineTo(0,-7*e),t.fill(),t.rotate(s+Math.PI/2),t.translate(-i,-r))}}})(),s=i.data(this.currentTimeValue,this.xLims,this.yLims,.001,i.parameterRange);let o=[NaN,NaN];for(const e of s){t.beginPath();const i=[e[0]*this.gridScale.x,-e[1]*this.gridScale.y],s=Math.atan2(i[1]-o[1],-i[0]+o[0]);r(t,...i,s),o=i}}}}))}addData(e,i,r={}){if("string"!=typeof e)throw`Error setting plot data: Unexpected type for ID "${JSON.stringify(e)}"`;if(Array.isArray(i)&&2===i.length)if(Array.isArray(i[0])){if(Array.isArray(i[1])){if(i[0].length!==i[1].length)throw"Error setting plot data: Lengths of data arrays are not equal.";for(let t=0;t<i[0].length;t++){const e="function"==typeof i[0][t]?i[0][t](0):i[0][t],r="function"==typeof i[1][t]?i[1][t](0,0):i[1][t];if("number"!=typeof e||"number"!=typeof r)throw"Error setting plot data: Data arrays contain types which are not numbers."}this.legend[e]={data:function*(t){for(let e=0;e<i[0].length;e++){const r="function"==typeof i[0][e]?i[0][e](t):i[0][e],s="function"==typeof i[1][e]?i[1][e](r,t):i[1][e];yield[r,s]}}}}else if("function"==typeof i[1]){if("number"!=typeof i[1](0,0))throw"Error setting plot data: Plot function does not return numbers.";for(let t=0;t<i[0].length;t++)if("number"!=typeof i[0][t])throw"Error setting plot data: Data array contains types which are not numbers.";this.legend[e]={data:function*(t){for(const e of i[0])yield[e,i[1](e,t)]}}}}else"function"==typeof i[0]&&"function"==typeof i[1]&&(this.legend[e]={data:function*(t,e,r,s,o){let n=e=>i[0](e,t),a=e=>i[1](e,t),h=o[0];for(;h<=o[1];)yield[n(h),a(h)],h+=s;yield[n(h),a(h)]}});else{if("function"!=typeof i)throw`Error setting plot data: Unrecognised data signature ${JSON.stringify(i)}.`;if("number"!=typeof i(0,0))throw"Error setting plot data: Plot function does not return numbers.";this.legend[e]={data:function*(t,e,r,s){let o=e[0],n=e=>i(e,t);for(;o<=e[1];){for(;!(o>e[1]);){if(n(o)<=r[1]&&n(o)>=r[0]&&!Number.isNaN(n(o))){yield[o-s,n(o-s)];break}o+=s}for(;yield[o,n(o)],!(o>e[1]||n(o)>r[1]||n(o)<r[0]||Number.isNaN(n(o)));)o+=s}}}}t.setupProperties(this.legend[e],"ResponsivePlot2DTrace",r),this._updatePlottingData()}removeData(t){delete this.legend[t],this._updatePlottingData()}setOrigin(...t){super.setOrigin(...t),this._updateLimits()}setMajorTicks(...e){t.setAxesProperty(this,"majorTicks","boolean",...e)}setMinorTicks(...e){t.setAxesProperty(this,"minorTicks","boolean",...e)}setMajorTickSize(...e){t.setAxesProperty(this,"majorTickSize","number",...e)}setMinorTickSize(...e){t.setAxesProperty(this,"minorTickSize","number",...e)}setMajorGridlines(...e){t.setAxesProperty(this,"majorGridlines","boolean",...e)}setMinorGridlines(...e){t.setAxesProperty(this,"minorGridlines","boolean",...e)}setMajorGridSize(...e){t.setAxesProperty(this,"majorGridSize","number",...e)}setMinorGridSize(...e){t.setAxesProperty(this,"minorGridSize","number",...e)}setGridScale(...e){t.setAxesProperty(this,"gridScale","number",...e),this._updateLimits(),this._updateForeground()}setXLims(...e){const i=this.xLims;if(t.setArrayProperty(this,"xLims","number",e,2),this.xLims[0]>=this.xLims[1])throw this.xLims=i,"Error setting xLims: Lower limit cannot be higher than or equal to higher limit.";this.gridScale.x=this.width/Math.abs(this.xLims[0]-this.xLims[1]),super.setOrigin(-this.xLims[0]*this.gridScale.x,this.origin.y),this._updateBackground(),this._updatePlottingData()}setYLims(...e){const i=this.yLims;if(t.setArrayProperty(this,"yLims","number",e,2),this.yLims[0]>=this.yLims[1])throw this.yLims=i,"Error setting yLims: Lower limit cannot be higher than or equal to higher limit.";this.gridScale.y=this.height/Math.abs(this.yLims[0]-this.yLims[1]),super.setOrigin(this.origin.x,this.yLims[1]*this.gridScale.y),this._updateBackground(),this._updatePlottingData()}setTraceColour(e,i){t.setLegendProperty(this,e,"traceColour",i)}setTraceStyle(e,i){t.setLegendProperty(this,e,"traceStyle",i)}setTraceWidth(e,i){t.setLegendProperty(this,e,"traceWidth",i)}setMarkerColour(e,i){t.setLegendProperty(this,e,"markerColour",i)}setMarkerStyle(e,i){t.setLegendProperty(this,e,"markerStyle",i)}setMarkerSize(e,i){t.setLegendProperty(this,e,"markerSize",i)}setParameterRange(e,...i){t.setLegendProperty(this,e,"parameterRange",i)}}}}();return{core:t,getActivePlots:function(){const e={};for(const i in t.activeCanvases)t.activeCanvases[i]instanceof t.ResponsivePlot2D&&(e[i]=t.activeCanvases[i]);return e},plot:function(e,i,r={}){let s;const o="string"==typeof e?e:document.getElementById(e);if(t.activeCanvases.hasOwnProperty(o)){s=t.activeCanvases[o];for(const t in r)if(r.hasOwnProperty(t)){const e=s[`set${t.charAt(0).toUpperCase()+t.slice(1)}`];0===e.length?e.call(s,...Array.isArray(r[t])?r[t]:[r[t]]):e.call(s,r[t])}}else s=new t.ResponsivePlot2D(e,r),r.hasOwnProperty("backgroundCSS")&&s.setBackgroundCSS(r.backgroundCSS),r.hasOwnProperty("xLims")&&s.setXLims(r.xLims),r.hasOwnProperty("yLims")&&s.setYLims(r.yLims);if(r.hasOwnProperty("reset")&&!0===r.reset)for(const t in s.legend)s.legend.hasOwnProperty(t)&&s.removeData(t);return null!==i&&s.addData(i.id,i.data,i.options),s}}}();